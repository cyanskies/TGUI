#include <TGUI/VerticalLayoutSimple.hpp>
#include <numeric>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    VerticalLayoutSimple::VerticalLayoutSimple()
    {
        m_callback.widgetType = "VerticalLayoutSimple";
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    VerticalLayoutSimple::Ptr VerticalLayoutSimple::create()
    {
        return std::make_shared<VerticalLayoutSimple>();
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    VerticalLayoutSimple::Ptr VerticalLayoutSimple::copy(VerticalLayoutSimple::ConstPtr layout)
    {
        if (layout)
            return std::static_pointer_cast<VerticalLayoutSimple>(layout->clone());
        else
            return nullptr;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void VerticalLayoutSimple::updateWidgetPositions()
    {
		float currentVertOffset = 0.f;
		float currentLineMaxVertOffset = 0.f;
		for (std::size_t i = 0; i < m_widgets.size(); ++i)
		{
			auto size = m_widgets[i]->getSize();

			m_widgets[i]->setPosition(0.f, currentVertOffset);

			if (m_widgets[i]->getFullSize() != m_widgets[i]->getSize())
			{
				m_widgets[i]->setPosition(m_widgets[i]->getPosition() + m_widgets[i]->getWidgetOffset());
			}

			currentVertOffset += size.y;
		}
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
